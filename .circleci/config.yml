version: 2.1

orbs: 
    win: circleci/windows@2.2.0

workflows:
  main:
    jobs:
      - test:
         name: "Linters"
         image: "python:3.6"
         toxenv: "codemodcheck,mypy,black,flake8"
      - test:
         name: "Python 2.7"
         image: "python:2.7"
         toxenv: "py27,covercircle"
      - test:
         name: "Python 3.6"
         image: "python:3.6"
         toxenv: "py36,covercircle"
      - test:
         name: "Python 3.7"
         image: "python:3.7"
         toxenv: "py37"
      - test:
         name: "Python 3.8"
         image: "python:3.8"
         toxenv: "py38"
      - integration:
          name: "Integration"
      - win:
         name: "Windows (Python 3.7)"
      - mac:
         name: "MacOS (Python 3.7)"
      - final:
         name: "Upload Coverage"
         requires:
            - "Python 2.7"
            - "Python 3.6"

commands:
    setup-tests:
        description: "Setup pyenv with cache"
        steps:
            - checkout
            - restore_cache:
                  keys:
                      - v0.2-dependencies-{{ checksum "setup.py" }}-{{ checksum "requirements_dev.txt" }}-{{ .Environment.CIRCLE_JOB }}
                      - v0.2-dependencies-{{ .Environment.CIRCLE_JOB }}
            - run:
                  name: Install python dependencies
                  command: |
                      pip install tox
            - save_cache:
                  paths:
                      - ./venv
                  key: v0.2-dependencies-{{ checksum "setup.py" }}-{{ checksum "requirements_dev.txt" }}-{{ .Environment.CIRCLE_JOB }}

jobs:
    test:
        parameters:
            image:
              type: string
            toxenv:
              type: string
        docker:
            - image: << parameters.image >>
        steps:
            - run:
                  name: Install system deps
                  command: apt-get update && apt-get install -y libsndfile1 ffmpeg
            - setup-tests
            - run:
                  name: Run tests
                  command: |
                      tox -v -e << parameters.toxenv >>
                  no_output_timeout: 5m
    win:
        executor: win/default
        steps:
            - checkout
            - run:
                  name: Install python dependencies
                  command: |
                      pip install tox
            - run:
                  name: Run tests
                  shell: bash.exe
                  command: |
                      tox -v -e py37
                  no_output_timeout: 5m
    mac:
        macos:
            xcode: 11.4.1
        steps:
            - checkout
            - run:
                  name: Install python dependencies
                  command: |
                      pip3 install tox
            - run:
                  name: Run tests
                  # Tests failed with Too many open files, so added ulimit
                  command: |
                      ulimit -n 1024
                      python3 -m tox -v -e py37
                  no_output_timeout: 10m
    final:
        docker:
            - image: python:3.7
        steps:
            - run:
                  name: Call coveralls webhook
                  command: |
                      curl -k https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN -d "payload[build_num]=$CIRCLE_WORKFLOW_ID&payload[status]=done"

    integration:
        docker:
            - image: wandb/local-integration:1.0.0
            - image: wandb/local:latest
              environment:
                CI: "1"
                DISABLE_TELEMETRY: "true"
        steps:
            - checkout
            # - run:
            #       name: Install system deps
            #       command: sudo apt-get update && sudo apt-get install -y libsndfile1 ffmpeg
            # Caching the deps in a docker image instead of circleci for now
            # - restore_cache:
            #       keys:
            #           - integration-test-pip-v2-{{ .Branch }}-{{ checksum "requirements_dev.txt" }}
            # - run:
            #       name: Install python dependencies
            #       command: pip install -r integration_tests/requirements.txt 
            # - save_cache:
            #       paths:
            #           - ~/.deps
            #       key: integration-test-pip-v2-{{ .Branch }}-{{ checksum "requirements_dev.txt" }}
            - run:
                  name: Install local wandb as package
                  command: pip install .
            - run:
                  name: Waiting for server to be ready
                  command: python integration_tests/scripts/wait_for_server.py
            - run:
                  name: Set environment variables
                  command: python integration_tests/setup.py >> $BASH_ENV
            - run:
                  name: Test command
                  command: python integration_tests/test_scripts/media/all_media_types.py
            - run:
                  name: Run all test script for setup
                  command: python -m pytest integration_tests/
